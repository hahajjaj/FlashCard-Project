package ulb.infof307.g9.view.store;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import ulb.infof307.g9.abstracts.Observable;
import javafx.scene.control.TextArea;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;
/**

 *The DownloadDeckView class represents a view for downloading decks.

 *It implements the Initializable interface and extends the Observable interface.
 */
public class DownloadDeckView implements Initializable, Observable<DownloadDeckView.Listener> {

    @FXML
    private TextArea descriptionBox;
    @FXML
    private ListView<String> listCard;
    @FXML
    private ListView<String> listDeck;
    @FXML
    private Label nameAuthor;
    private Listener listener;

    /**
     * Handles the event when the back button is clicked.
     * Notifies the listener to go back to the main menu.
     * @param event The ActionEvent object generated by the click.
     */
    @FXML
    void backClicked(ActionEvent event) {
        listener.goBack();
    }
    /**
     * Called when the download button is clicked.
     * Retrieves the selected deck name from the list and notifies the listener to download the deck.
     *
     * @param event The ActionEvent object generated by the click.
     */
    @FXML
    void downloadButtonClicked(ActionEvent event) {
        String currentDeckName = listDeck.getSelectionModel().getSelectedItem();
        if (currentDeckName != null) {
            listener.downloadDeck(currentDeckName);
        }
    }

    /**
     * Method used to init the list views of the decks and the cards. It also changes the author's label.
     *
     * @param url            The location used to resolve relative paths.
     * @param resourceBundle The resource bundle containing localized objects.
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Method used to update the ListViews
        listDeck.getSelectionModel().selectedItemProperty().addListener((observableValue, s, t1) -> {
            String currentDeckName = listDeck.getSelectionModel().getSelectedItem();
            if (currentDeckName != null) {
                List<String> currentCards = listener.getCardTitles(currentDeckName);
                descriptionBox.setText(listener.getDeckDescription(currentDeckName));
                listCard.getItems().clear();
                listCard.getItems().addAll(currentCards);
                nameAuthor.setText(listener.getAuthorFromDeck(currentDeckName));
            }
        });
    }
    /**
     * Updates the list of decks.
     *
     * @param deckNames The list of deck names to update.
     */
    public void updateDeckList(List<String> deckNames) {
        listDeck.getItems().clear();
        listDeck.getItems().addAll(deckNames);
    }
    /**
     * Sets the listener for the DownloadDeckView.
     *
     * @param listener The listener to set.
     */
    @Override
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    public interface Listener {

        /**
         * Method called if the user wants to go to the main menu.
         */
        void goBack();

        void downloadDeck(String deckName);

        List<String> getCardTitles(String deckName);

        String getAuthorFromDeck(String deckName);

        String getDeckDescription(String deckName);
    }
}
