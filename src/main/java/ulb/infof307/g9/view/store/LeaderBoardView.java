package ulb.infof307.g9.view.store;

import javafx.beans.value.ObservableValueBase;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import ulb.infof307.g9.abstracts.Observable;
import ulb.infof307.g9.model.RankRow;
import javafx.scene.control.ListView;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;
/**
 * The LeaderBoardView class is responsible for displaying the leaderboard and deck list.
 * It provides methods for setting the leaderboard, filling the deck list, and handling user actions.
 */
public class LeaderBoardView implements Initializable, Observable<LeaderBoardView.Listener> {

    @FXML
    private TableView<RankRow> leaderBoardTable;

    @FXML
    private ListView<String> deckList;
    @FXML
    private TableColumn<RankRow, Integer> rankNumColumn;
    @FXML
    private TableColumn<RankRow, String> nameColumn;
    @FXML
    private TableColumn<RankRow, Integer> scoreColumn;
    private Listener listener;


    /**
     * Set the leader board and sort it by score in descending order
     *
     * @param leaderBoard The leaderboard to set.
     */
    public void setLeaderBoard(List<RankRow> leaderBoard) {
        // Clear the table and add the new data
        leaderBoardTable.getItems().clear();
        for (RankRow rankRow : leaderBoard) {
            leaderBoardTable.getItems().add(rankRow);
        }
        // Sort the table by score in descending order
        rankNumColumn.setSortType(TableColumn.SortType.ASCENDING);
        leaderBoardTable.getSortOrder().clear();
        leaderBoardTable.getSortOrder().add(rankNumColumn);
    }
    /**
     * Fills the deck list with deck names.
     *
     * @param listDeckName The list of deck names to fill.
     */
    public void fillListDeck(List<String> listDeckName){
        deckList.getItems().addAll(listDeckName);
    }
    /**
     * Called when the go back button is clicked.
     * Notifies the listener to go back.
     *
     * @param e The ActionEvent object generated by the click.
     */
    @FXML
    private void goBackClicked(ActionEvent e) {
        listener.onGoBack();
    }
    /**
     * Initializes the view and sets the cell value factories for the table columns.
     *
     * @param url            The location used to resolve relative paths.
     * @param resourceBundle The resource bundle containing localized objects.
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Set the cell value factories for the table columns
        // The cell value factories are used to get the property of the RankRows objects
        rankNumColumn.setCellValueFactory(
                rankRowIntegerCellDataFeatures -> new ObservableValueBase<>() { // create a new ObservableValueBase for the rankNum property
                    @Override
                    public Integer getValue() {
                        return rankRowIntegerCellDataFeatures.getValue().rankNum();
                    } // gets the rankNum property from the RankRow object
                }
        );
        nameColumn.setCellValueFactory(
                rankRowStringCellDataFeatures -> new ObservableValueBase<>() { // create a new ObservableValueBase for the username property
                    @Override
                    public String getValue() {
                        return rankRowStringCellDataFeatures.getValue().username();
                    } // gets the username property from the RankRow object
                }
        );
        scoreColumn.setCellValueFactory(
                rankRowIntegerCellDataFeatures -> new ObservableValueBase<>() { // create a new ObservableValueBase for the score property
                    @Override
                    public Integer getValue() {
                        return rankRowIntegerCellDataFeatures.getValue().score();
                    } // gets the score property from the RankRow object
                }
        );
        // setting a listener for when a cell in the decks list view is clicked
        deckList.getSelectionModel().selectedItemProperty().addListener((observableValue, s, t1) -> {
            String currentCardName = deckList.getSelectionModel().getSelectedItem();
            //listener.updateCurrentDeckController(currentDeckName);
            if (currentCardName != null) {
                listener.getRankDeck(currentCardName);
            }
        });

    }
    /**
     * Sets the listener for the LeaderBoardView.
     *
     * @param listener The listener to set.
     */
    @Override
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    public interface Listener {
        void onGoBack();

        void getRankDeck(String deckName);
    }
}
